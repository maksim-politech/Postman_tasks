{
	"info": {
		"_postman_id": "e1734a7c-66c2-4c8b-b0fa-45885c9f422e",
		"name": "Test_Chai_Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Testttt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"///////////////////////////////////////////////////\r",
							"let item_1=2\r",
							"pm.test(\"Item_1_test\",function() {\r",
							"    pm.expect(item_1).to.equal(2)\r",
							"})\r",
							"//////////////////////////////////////////////////\r",
							"\r",
							"//////////////////\r",
							"//теперь в переменную персон присвоим объект джава скрипта json\r",
							"let person = {\r",
							"    \"age\": \"21\",\r",
							"    \"family\": {\r",
							"        \"children\": [\r",
							"            [\r",
							"                \"Alex\",\r",
							"                24\r",
							"            ],\r",
							"            [\r",
							"                \"Kate\",\r",
							"                12\r",
							"            ]\r",
							"        ],\r",
							"        \"u_salary_1_5_year\": 60000\r",
							"    },\r",
							"    \"name\": \"Aboba\",\r",
							"    \"salary\": 15000\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Person\",function() {\r",
							"    pm.expect(person.age).to.deep.equal(\"21\") ///дип это вроде еще и по ===(типу данных) - хотя обычный тоже по типу проверяет, Вадим хз\r",
							"    // цифра в кавычках, потому что в данном джейсоне у нас там тоже строка\r",
							"    //pm.expect(+person.age).to.deep.equal(21) //а так можно через приведение строки к числу \r",
							"})\r",
							"\r",
							"//////////////////////////////////////////////////////////////\r",
							"const jsonData = pm.response.json(); ///или вот так, чтобы не вручную объект какой-то писать, а доставать из пришедшей на наш запрос json\r",
							"pm.test(\"Person2\",function() {\r",
							"    pm.expect(jsonData.age).to.deep.equal(\"22\") \r",
							"})\r",
							"////////////////////////////////////////////////////////////////\r",
							"let person3 = {\r",
							"    \"age\": \"21\",\r",
							"    \"family\": {    /////family тоже объект\r",
							"        \"children\": [[\"Alex\", 24],[\"Kate\",12]],   /////По сути это двумерный массив\r",
							"        \"u_salary_1_5_year\": 60000\r",
							"    },\r",
							"    \"name\": \"Aboba\",\r",
							"    \"salary\": 15000\r",
							"}\r",
							"\r",
							"pm.test(\"Person3\",function() {\r",
							"    pm.expect(person3.family.children[0][1]).to.deep.equal(24)\r",
							"})\r",
							"\r",
							"pm.test(\"Person4\",function() {\r",
							"    pm.expect(person3).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"pm.test(\"Person5\",function() {\r",
							"    pm.expect(person3).to.deep.include({\"salary\": 15000})    ////внутри объект, поэтому скобки фигурные\r",
							"})\r",
							"\r",
							"pm.test(\"Person6\",function() {\r",
							"    pm.expect(person3.family.children[1]).to.deep.include(\"Kate\") ////или например что 12 есть можно также проверить\r",
							"})\r",
							"//для массива include, а для person3.family.u_salary_1_5_year например через equal\r",
							"\r",
							"pm.test(\"Person7\",function() {\r",
							"    pm.expect(person3.family.children[1]).to.be.a(\"Array\") ///аналогично на string number проверяем\r",
							"////можно в конце доавить /that.include(12)\r",
							"})    ////можно писать an вместо a, это артикль\r",
							"\r",
							"\r",
							"pm.test(\"Person8\",function() {\r",
							"    pm.expect(person3.name).to.be.a(\"string\") \r",
							"})\r",
							"\r",
							"pm.test(\"Person9\",function() {\r",
							"    pm.expect(person3.name).a(\"string\") /////////а со статус кодом почему-то такое не сработало(убрать to have)\r",
							"})\r",
							"\r",
							"pm.test(\"Person10\",function() {\r",
							"    pm.expect(person3.name).to.be(\"string\") \r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "21",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "15000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Aboba",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Vadim/jjd909/12242kjkWpqc322823r23r3r457271evny\n",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		}
	]
}